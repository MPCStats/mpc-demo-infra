# coding: utf-8
"""
  Demo to show for DevCon, focusing on client interface, allowing clients to disconnect after giving inputs and reconnect to get output
  while also allowing servers to store values
"""
from typing import Type
from Compiler.types import sint, regint, Array, MemValue
from Compiler.library import print_ln, do_while, for_range, accept_client_connection, listen_for_clients, if_, if_e, else_, crash
from Compiler.instructions import closeclientconnection
from Compiler.util import if_else
from Compiler.circuit import sha3_256

from mpcstats import mpcstats_lib

PORTNUM = {client_port_base}
MAX_DATA_PROVIDERS = {max_data_providers}
NUM_DATA_PROVIDERS = {num_data_providers}


def accept_client():
    client_socket_id = accept_client_connection(PORTNUM)
    placeholder = regint.read_from_socket(client_socket_id)
    return client_socket_id

def computation(client_values: sint.Array):
    result = sint.Array(5)
    # num_data_providers should be public
    num_data_providers = NUM_DATA_PROVIDERS
    data = sint.Array(num_data_providers)
    @for_range(num_data_providers)
    def _(i):
        data[i] = client_values[1+i]
    # Only sort data if there are more than 1 data provider
    # Otherwise, the program will fail to compile.
    if num_data_providers > 1:
        data.sort()
    # num_data_providers
    result[0]=sint(num_data_providers)
    # Max
    result[1] = data[num_data_providers-1]
    # Sum
    result[2] = sum(data)
    median_odd = sint(0)
    median_even = sint(0)
    area = sint(0)
    @for_range(num_data_providers)
    def _(i):
        median_odd.update(median_odd+(num_data_providers==2*sint(i)+sint(1))*data[i])
        median_even.update(median_even+(num_data_providers==2*sint(i))*data[i]/2+(num_data_providers-2==2*sint(i))*data[i]/2)
        area.update(area+(2*i+1)*data[i])
    # Median
    # result[3] = (num_data_providers%2)*median_odd + (1-num_data_providers%2)*median_even
    result[3] = mpcstats_lib.median(data)

    # Note that Gini coefficient = (area/(num_data_providers*result[1])) - 1
    # But we leave that to client side handling to optimize calculation in mpc
    result[4] = area
    return result

def main():

    # Start listening for client socket connections
    listen_for_clients(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    client_socket_id = accept_client()
    # put as array to make it object
    # First element is the number of clients
    client_values = sint.Array(1 + MAX_DATA_PROVIDERS)
    commitment_values = sint.Array(MAX_DATA_PROVIDERS)

    client_values.read_from_file(0)
    commitment_values.read_from_file(1 + MAX_DATA_PROVIDERS)

    result = computation(client_values)

    return_array = sint.Array(5 + MAX_DATA_PROVIDERS)
    return_array[0] = result[0]
    return_array[1] = result[1]
    return_array[2] = result[2]
    return_array[3] = result[3]
    return_array[4] = result[4]



    # Return the commitment values to the client
    @for_range(MAX_DATA_PROVIDERS)
    def _(i):
        return_array[5+i] = commitment_values[i]

    return_array.reveal_to_clients([client_socket_id])

    print_ln('Now closing this connection')
    closeclientconnection(client_socket_id)

main()
