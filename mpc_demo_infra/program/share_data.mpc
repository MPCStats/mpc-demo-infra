# coding: utf-8
"""
  Demo to show for DevCon, focusing on client interface, allowing clients to disconnect after giving inputs and reconnect to get output
  while also allowing servers to store values
"""
from typing import Type
from Compiler.types import sint, regint, Array, MemValue
from Compiler.library import print_ln, do_while, for_range, accept_client_connection, listen_for_clients, if_, if_e, else_, crash
from Compiler.instructions import closeclientconnection
from Compiler.util import if_else
from Compiler.circuit import sha3_256
from Compiler.GC.types import sbitvec, sbit


SECRET_INDEX = regint({secret_index})
PORTNUM = {client_port}
MAX_DATA_PROVIDERS = {max_data_providers}
INPUT_BYTES = {input_bytes}
DELTA = {delta}
ZERO_ENCODINGS = {zero_encodings}


def accept_client():
    client_socket_id = accept_client_connection(PORTNUM)
    isInput = regint.read_from_socket(client_socket_id)
    return client_socket_id


def client_input(t: Type[sint], client_socket_id: regint):
    """
    Send share of random value, receive input and deduce share.
    """
    received = t.receive_from_client(2, client_socket_id)
    return received[0], sbitvec(received[1], 256)

def calculate_data_commitment(num_bytes_followers: int, followers: sint, delta: sbitvec, encoding: list[sbitvec], nonce: sbitvec):
    # Adjust based on data_type
    ASCII_BASE = 48
    followers_bits_list = []
    number = followers
    for i in range(num_bytes_followers):
        divisor = sint(10**(num_bytes_followers-1-i))
        curr_digit = number.int_div(divisor, 4*num_bytes_followers)
        followers_bits_list += [sbit(ele) for ele in sbitvec(curr_digit+ASCII_BASE, 8).v]
        number = number.int_mod(divisor, 4*num_bytes_followers)

    active_encoding:list[sbitvec] = []
    for i in range(len(encoding)):
        filtered_delta = []
        for j in range(len(delta)):
            filtered_delta.append(followers_bits_list[i].if_else(delta[j], sbit(0)))
        filtered_delta = sbitvec.from_vec(filtered_delta)
        active_encoding.append(encoding[i].bit_xor(filtered_delta))

    concat = nonce.bit_decompose() + sbitvec(sint(num_bytes_followers), 8).bit_decompose()
    for i in range(len(encoding)):
        if i%8 ==0:
            concat = concat + sbitvec(sint(1), 8).bit_decompose()
        concat = concat+active_encoding[i].bit_decompose()
    return sha3_256(sbitvec.compose(concat))


def main():
    # put as array to make it object
    # First element is the number of clients
    client_values = sint.Array(1 + MAX_DATA_PROVIDERS)
    commitment_values = sint.Array(MAX_DATA_PROVIDERS)

    client_values.read_from_file(0)  # NOTE: Skipped if it's the first run
    commitment_values.read_from_file(1 + MAX_DATA_PROVIDERS)  # NOTE: Skipped if it's the first run

    # Start listening for client socket connections
    listen_for_clients(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    client_socket_id = accept_client()
    print_ln('client_socket_id: %s', client_socket_id)

    input_value, input_nonce = client_input(sint, client_socket_id)
    client_values[SECRET_INDEX] = input_value
    client_values[0] = client_values[0] + 1
    client_values.write_to_file(0)
    print_ln('client_values: after update: %s', [client_values[i].reveal() for i in range(MAX_DATA_PROVIDERS + 1)])

    # these are shared directly to each computation party so can just hardcode
    input_delta = sbitvec.from_hex(DELTA)
    input_zero_encodings = [sbitvec.from_hex(e) for e in ZERO_ENCODINGS]

    # nonce must be secret_shared
    # Hardcode 1 as byte of this input
    input_commitment = calculate_data_commitment(INPUT_BYTES, input_value, input_delta, input_zero_encodings, input_nonce)
    # input_commitment = sbitvec.from_hex("a7fb749820e5a4439a7eff67c76598f1db507a3d1513370a0c0efe7cbaa47beb")
    # input_commitment.reveal_print_hex()
    input_commitment.reveal_print_hex()

    # commitment_values[SECRET_INDEX] = input_commitment
    commitment_values.write_to_file(1+MAX_DATA_PROVIDERS)
    print_ln('commitment_values: after update: %s', [commitment_values[i].reveal() for i in range(MAX_DATA_PROVIDERS)])
    sint.reveal_to_clients([client_socket_id],[commitment_values[SECRET_INDEX]])
    print_ln('Now closing this connection')
    print_ln('num data providers: %s', client_values[0].reveal())

    closeclientconnection(client_socket_id)


main()
