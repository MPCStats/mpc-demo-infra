from typing import Type

from Compiler.types import sint, regint, Array, MemValue
from Compiler.library import print_ln, do_while, for_range, accept_client_connection, listen_for_clients, if_, if_e, else_, crash
from Compiler.instructions import closeclientconnection
from Compiler.util import if_else

c = sfix({secret_index})
secret_index = {secret_index}
# d = sfix({client_port})
print_ln("output: %s", c.reveal())
# data commitment hash
print_ln("Reg[8] = 0xfd9067ca55ff4258e2fd73d64cb41e1314dbd2456502d59591761388b9bf0e24")

# TODO: adapt this file to make it work with client interface
PORTNUM = {client_port}
MAX_NUM_CLIENTS = {max_data_providers}


def accept_client():
    client_socket_id = accept_client_connection(PORTNUM)
    isInput = regint.read_from_socket(client_socket_id)
    return client_socket_id


def client_input(t: Type[sint], client_socket_id: regint):
    """
    Send share of random value, receive input and deduce share.
    """
    return t.receive_from_client(1, client_socket_id)[0]


def main():
    # Start listening for client socket connections
    listen_for_clients(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    client_socket_id = accept_client()
    print_ln('client_socket_id: %s', client_socket_id)

    # put as array to make it object
    # First element is the number of clients
    client_values = sint.Array(1 + MAX_NUM_CLIENTS)

    ## read_from_file fails if
    ## NOTE: it's removed when it's the first time being run, otherwise we get error 'libc++abi: terminating due to uncaught exception of type file_error: File Error : Got to EOF when reading from disk (expecting 176 bytes from 32).'
    client_values.read_from_file(0)
    ##
    print_ln('client_values: before update: %s', [client_values[i].reveal() for i in range(MAX_NUM_CLIENTS + 1)])

    @if_(client_socket_id >= MAX_NUM_CLIENTS)
    def _():
        print_ln('client id too high')
        crash()

    value = client_input(sint, client_socket_id)
    client_values[secret_index] = value
    client_values[0] = client_values[0] + 1
    client_values.write_to_file(0)
    print_ln('client_values: after  update: %s', [client_values[i].reveal() for i in range(MAX_NUM_CLIENTS + 1)])

    print_ln('Now closing this connection')
    print_ln('num clients: %s', client_values[0].reveal())
    print_ln("!@# NOOO")
    closeclientconnection(client_socket_id)


main()
